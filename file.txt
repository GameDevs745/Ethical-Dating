This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where security check has been disabled.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Security check has been disabled - content may contain sensitive information
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
public/
  index.html
  manifest.json
  robots.txt
src/
  components/
    errorBoundary.js
    Home.js
    Login.js
    ProfileForm.js
    ProtectedRoute.js
    Signup.js
    SwipeCard.js
    SwipePage.js
  contexts/
    AuthContext.js
  data/
    authService.js
    localDatabase.js
    seedData.js
    swipeService.js
    userService.js
  App.css
  App.js
  index.css
  index.js
  reportWebVitals.js
  setupTests.js
.gitignore
package.json
README.md

================================================================
Files
================================================================

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "Ethical Dating",
  "name": "Ethical Dating App",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: src/components/errorBoundary.js
================
import React from 'react';
import { Container, Typography } from '@mui/material';

export class ErrorBoundary extends React.Component {
  state = { error: null };
  
  static getDerivedStateFromError(error) {
    return { error };
  }

  render() {
    if (this.state.error) {
      return (
        <Container sx={{ p: 4 }}>
          <Typography color="error" variant="h5">
            Something went wrong:
          </Typography>
          <Typography>{this.state.error.message}</Typography>
        </Container>
      );
    }
    return this.props.children;
  }
}

================
File: src/components/Home.js
================
import { Button, Typography, Container } from '@mui/material';
import { useAuth } from '../contexts/AuthContext';
import { Link } from 'react-router-dom';

const Home = () => {
  const { user, logout } = useAuth();

const handleLogout = () => {
    logout(); // Use the logout function from AuthContext
  };

  return (
    <Container>
      <Typography variant="h4" sx={{ mt: 4 }}>
        Welcome, {user?.name || user?.email}!
      </Typography>
      <Button variant="contained" onClick={handleLogout} sx={{ mt: 2 }}>
        Logout
      </Button>
      <Button
        component={Link}
        to="/profile"
        variant="outlined"
        sx={{ mt: 2, ml: 2 }}
      >
        Edit Profile
      </Button>
      <Button
        component={Link}
        to="/swipe"
        variant="contained"
        color="secondary"
        sx={{ mt: 2, ml: 2 }}
      >
        Find Matches
      </Button>
    </Container>
  );
};

export default Home;

================
File: src/components/Login.js
================
import { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Button, TextField, Container, Typography, Box } from '@mui/material';
import { fakeAuth } from '../data/authService';

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

const handleSubmit = async (e) => {
  e.preventDefault();
  try {
    await fakeAuth.login(email, password);
    navigate('/');
  } catch (err) {
    setError('Invalid credentials');
  }
};

  return (
    <Container maxWidth="xs">
      <Box sx={{ mt: 8 }}>
        <Typography variant="h4" align="center">Login</Typography>
        {error && <Typography color="error">{error}</Typography>}
        <form onSubmit={handleSubmit}>
          <TextField
            margin="normal"
            fullWidth
            label="Email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
          />
          <TextField
            margin="normal"
            fullWidth
            label="Password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
          <Button type="submit" fullWidth variant="contained" sx={{ mt: 3 }}>
            Login
          </Button>
        </form>
        <Typography align="center" sx={{ mt: 2 }}>
          New user? <Link to="/signup">Sign Up</Link>
        </Typography>
      </Box>
    </Container>
  );
};

export default Login;

================
File: src/components/ProfileForm.js
================
import { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { userService } from '../data/userService';
import { useNavigate } from 'react-router-dom';
import { 
  Button, 
  TextField, 
  Container, 
  Typography, 
  Box, 
  Avatar,
  CircularProgress,
  Alert
} from '@mui/material';
import { MenuItem } from '@mui/material';

const ProfileForm = () => {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    name: '',
    age: '',
    bio: '',
    gender: '',
    preference: '',
    photoURL: ''
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);

  useEffect(() => {
    const loadProfile = async () => {
      try {
        setLoading(true);
        const profile = await userService.getUser(user.id);
        if (profile) {
          setFormData({
            name: profile.name || '',
            age: profile.age || '',
            bio: profile.bio || '',
            gender: profile.gender || '',
            preference: profile.preference || '',
            photoURL: profile.photoURL || ''
          });
        }
      } catch (err) {
        setError('Failed to load profile');
      } finally {
        setLoading(false);
      }
    };

    if (user?.id) loadProfile();
  }, [user]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const validateForm = () => {
    if (!formData.gender) {
      setError('Please select your gender');
      return false;
    }
    if (!formData.preference) {
      setError('Please select your preference');
      return false;
    }
    if (formData.age < 18) {
      setError('You must be at least 18 years old');
      return false;
    }
    return true;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess(false);

    if (!validateForm()) return;

    try {
      await userService.saveUser({
        id: user.id,
        email: user.email,
        ...formData,
        age: Number(formData.age),
        createdAt: new Date()
      });
      setSuccess(true);
      setTimeout(() => navigate('/'), 2000);
    } catch (err) {
      setError('Failed to save profile');
    }
  };

  if (loading) {
    return (
      <Container maxWidth="sm">
        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
          <CircularProgress />
        </Box>
      </Container>
    );
  }

  return (
    <Container maxWidth="sm">
      <Box sx={{ mt: 4, textAlign: 'center' }}>
        <Typography variant="h4" gutterBottom>
          Your Profile
        </Typography>

        <Avatar
          src={formData.photoURL}
          sx={{ 
            width: 100, 
            height: 100, 
            mx: 'auto', 
            mb: 2,
            border: '2px solid #1976d2'
          }}
        />

        {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}
        {success && <Alert severity="success" sx={{ mb: 2 }}>Profile saved successfully!</Alert>}

        <form onSubmit={handleSubmit}>
          <TextField
            fullWidth
            label="Name"
            name="name"
            margin="normal"
            value={formData.name}
            onChange={handleChange}
            required
          />

          <TextField
            fullWidth
            label="Age"
            name="age"
            type="number"
            margin="normal"
            value={formData.age}
            onChange={handleChange}
            inputProps={{ min: 18, max: 100 }}
            required
          />

          <TextField
            fullWidth
            label="Bio"
            name="bio"
            multiline
            rows={4}
            margin="normal"
            value={formData.bio}
            onChange={handleChange}
            inputProps={{ maxLength: 500 }}
          />

          <TextField
            select
            fullWidth
            label="Gender"
            name="gender"
            margin="normal"
            value={formData.gender}
            onChange={handleChange}
            required
          >
            <MenuItem value="male">Male</MenuItem>
            <MenuItem value="female">Female</MenuItem>
            <MenuItem value="other">Other</MenuItem>
          </TextField>

          <TextField
            select
            fullWidth
            label="Interested In"
            name="preference"
            margin="normal"
            value={formData.preference}
            onChange={handleChange}
            required
          >
            <MenuItem value="male">Male</MenuItem>
            <MenuItem value="female">Female</MenuItem>
            <MenuItem value="both">Both</MenuItem>
          </TextField>

          <TextField
            fullWidth
            label="Profile Picture URL"
            name="photoURL"
            margin="normal"
            value={formData.photoURL}
            onChange={handleChange}
            placeholder="https://example.com/photo.jpg"
          />

          <Button 
            type="submit" 
            variant="contained" 
            size="large" 
            sx={{ mt: 3, px: 4 }}
          >
            Save Profile
          </Button>
        </form>
      </Box>
    </Container>
  );
};

export default ProfileForm;

================
File: src/components/ProtectedRoute.js
================
import { useEffect, useState } from 'react';
import { Navigate, useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { userService } from '../data/userService';
import CircularProgress from '@mui/material/CircularProgress';

const ProtectedRoute = ({ children }) => {
  const { user } = useAuth();
  const [profileComplete, setProfileComplete] = useState(false);
  const [loading, setLoading] = useState(true);

 useEffect(() => {
  const checkProfile = async () => {
    setLoading(true);
    if (user) {
      const profile = await userService.getUser(user.id);
      setProfileComplete(!!profile?.gender && !!profile?.preference);
    }
    setLoading(false);
  };
  checkProfile();
}, [user]);
  if (loading) return <CircularProgress />;
  if (!user) return <Navigate to="/login" />;
  if (!profileComplete) return <Navigate to="/profile" />;
  
  return children;
};

export default ProtectedRoute;

================
File: src/components/Signup.js
================
import { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Button, TextField, Container, Typography, Box } from '@mui/material';
import { fakeAuth } from '../data/authService'

const Signup = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
  e.preventDefault();
  if (password.length < 6) {
    setError('Password must be at least 6 characters');
    return;
  }
  try {
    await fakeAuth.login(email, password); // Use same method for signup
    navigate('/');
  } catch (err) {
    setError('Registration failed');
  }
};

  return (
    <Container maxWidth="xs">
      <Box sx={{ mt: 8 }}>
        <Typography variant="h4" align="center">Sign Up</Typography>
        {error && <Typography color="error">{error}</Typography>}
        <form onSubmit={handleSubmit}>
          <TextField
            margin="normal"
            fullWidth
            label="Email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
          />
          <TextField
            margin="normal"
            fullWidth
            label="Password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
          <Button type="submit" fullWidth variant="contained" sx={{ mt: 3 }}>
            Sign Up
          </Button>
        </form>
        <Typography align="center" sx={{ mt: 2 }}>
          Already have an account? <Link to="/login">Login</Link>
        </Typography>
      </Box>
    </Container>
  );
};

export default Signup;

================
File: src/components/SwipeCard.js
================
// src/components/SwipeCard.js
import { Card, CardMedia, CardContent, Typography, IconButton, Box } from '@mui/material';
import FavoriteIcon from '@mui/icons-material/Favorite';
import CloseIcon from '@mui/icons-material/Close';

const SwipeCard = ({ profile, onSwipeLeft, onSwipeRight }) => {
  return (
    <Card sx={{ maxWidth: 345, margin: 'auto', position: 'relative', minHeight: 400 }}>
      <CardMedia
        component="img"
        height="240"
        image={profile.photoURL || '/default-profile.jpg'}
        alt={profile.name}
      />
      <CardContent>
        <Typography variant="h5">
          {profile.name}, {profile.age}
        </Typography>
        <Typography variant="body2" color="text.secondary">
          {profile.bio}
        </Typography>
      </CardContent>
      <Box sx={{ position: 'absolute', bottom: 16, right: 16, display: 'flex', gap: 1 }}>
        <IconButton color="error" onClick={onSwipeLeft}>
          <CloseIcon fontSize="large" />
        </IconButton>
        <IconButton color="success" onClick={onSwipeRight}>
          <FavoriteIcon fontSize="large" />
        </IconButton>
      </Box>
    </Card>
  );
};

export default SwipeCard;

================
File: src/components/SwipePage.js
================
import { useEffect, useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { userService } from '../data/userService';
import { swipeService } from '../data/swipeService.js';
import SwipeCard from './SwipeCard';
import { Container, Typography, Button, Box } from '@mui/material';
import CloseIcon from '@mui/icons-material/Close';
import FavoriteIcon from '@mui/icons-material/Favorite';

const SwipePage = () => {
  const { user } = useAuth();
  const [profiles, setProfiles] = useState([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(true);
  const [noMoreProfiles, setNoMoreProfiles] = useState(false);

  useEffect(() => {
    const loadProfiles = async () => {
      try {
        setLoading(true);
        const currentUser = await userService.getUser(user.id);
        const allUsers = await userService.getAllUsers();
        
        // Get already swiped users
        const swipes = await swipeService.getSwipesByUser(user.id);
        const swipedIds = swipes.map(swipe => swipe.swipeeId);

        const filtered = allUsers.filter(u => 
          u.id !== user.id &&
          (currentUser.preference === 'both' || u.gender === currentUser.preference) &&
          !swipedIds.includes(u.id)
        );

        setProfiles(filtered);
        setNoMoreProfiles(filtered.length === 0);
      } catch (err) {
        setError('Failed to load profiles');
      } finally {
        setLoading(false);
      }
    };

    if (user?.id) loadProfiles();
  }, [user]);

  const handleSwipe = async (direction) => {
    try {
      if (!profiles[currentIndex]) return;

      const swipeeId = profiles[currentIndex].id;
      
      // Record the swipe
      await swipeService.addSwipe({
        id: `${user.id}_${swipeeId}`,
        swiperId: user.id,
        swipeeId,
        direction,
        timestamp: new Date()
      });

      // Check for match
      if (direction === 'right') {
        const isMatch = await swipeService.checkForMatch(user.id, swipeeId);
        if (isMatch) {
          alert(`It's a match with ${profiles[currentIndex].name}!`);
        }
      }

      // Move to next profile
      if (currentIndex < profiles.length - 1) {
        setCurrentIndex(prev => prev + 1);
      } else {
        setNoMoreProfiles(true);
      }
    } catch (err) {
      setError('Failed to process swipe');
      console.error('Swipe error:', err);
    }
  };

  if (loading) {
    return (
      <Container sx={{ py: 4 }}>
        <Typography>Loading profiles...</Typography>
      </Container>
    );
  }

  if (error) {
    return (
      <Container sx={{ py: 4 }}>
        <Typography color="error">{error}</Typography>
      </Container>
    );
  }

  return (
    <Container sx={{ py: 4, position: 'relative', minHeight: 500 }}>
      {noMoreProfiles ? (
        <Typography variant="h5" align="center">
          No more profiles to show!
        </Typography>
      ) : (
        profiles[currentIndex] && (
          <>
            <SwipeCard
              profile={profiles[currentIndex]}
              onSwipeLeft={() => handleSwipe('left')}
              onSwipeRight={() => handleSwipe('right')}
            />
            
            <Box sx={{ 
              display: 'flex', 
              justifyContent: 'center', 
              gap: 2, 
              mt: 4 
            }}>
              <Button
                variant="contained"
                color="error"
                startIcon={<CloseIcon />}
                onClick={() => handleSwipe('left')}
                sx={{ px: 4, py: 2 }}
              >
                Pass
              </Button>
              
              <Button
                variant="contained"
                color="success"
                startIcon={<FavoriteIcon />}
                onClick={() => handleSwipe('right')}
                sx={{ px: 4, py: 2 }}
              >
                Like
              </Button>
            </Box>
          </>
        )
      )}
    </Container>
  );
};

export default SwipePage;

================
File: src/contexts/AuthContext.js
================
// src/contexts/AuthContext.js
import { createContext, useContext, useEffect, useState } from 'react';
import { fakeAuth } from '../data/authService';
import { initDB } from '../data/localDatabase';
import { userService } from '../data/userService';
import { seedInitialUsers } from '../data/seedData';

const AuthContext = createContext();

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [dbReady, setDbReady] = useState(false);
  const [error, setError] = useState(null);

  // Initialize database and auth state
  useEffect(() => {
    const initializeApp = async () => {
      try {
        // Initialize database
        await initDB();
        setDbReady(true);
        
        // Seed initial data if needed
        await seedInitialUsers();

        // Check existing auth
        const storedUser = fakeAuth.getCurrentUser();
        if (storedUser) {
          // Verify user exists in database
          const dbUser = await userService.getUser(storedUser.id);
          if (dbUser) {
            fakeAuth.currentUser = dbUser;
            setUser(dbUser);
          }
        }
      } catch (error) {
        console.error('Initialization error:', error);
      } finally {
        setLoading(false);
      }
    };

    initializeApp();
  }, []);

  const login = async (email, password) => {
  try {
    if (!dbReady) throw new Error('Database not ready')
      // Create/authenticate user
      const authUser = await fakeAuth.login(email, password);
      
      // Save/update user in database
      const userData = {
        id: authUser.id,
        email: authUser.email,
        name: authUser.name,
        createdAt: new Date()
      };
      await userService.saveUser(userData);
      
      // Get full user record
      const dbUser = await userService.getUser(authUser.id);
      setUser(dbUser);
      
      return dbUser;
   } catch (error) {
    setError(error.message);
    throw error;
  }
};

  const logout = () => {
    fakeAuth.logout();
    setUser(null);
    window.location.reload();
  };

  const value = {
    user,
    loading,
    dbReady,
    login,
    logout,
    getCurrentUser: () => fakeAuth.getCurrentUser(),
    error,
    clearError: () => setError(null)
  };

  return (
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  );
}

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider');
  }
  return context;
};

================
File: src/data/authService.js
================
const FAKE_DELAY = 500; // Simulate API delay

export const fakeAuth = {
  currentUser: null,

  async login(email, password) {
    await new Promise(resolve => setTimeout(resolve, FAKE_DELAY));
    const user = {
      id: btoa(email),
      email,
      name: email.split('@')[0],
      createdAt: new Date()
    };
    localStorage.setItem('currentUser', JSON.stringify(user));
    this.currentUser = user;
    return user;
  },

  logout() {
    localStorage.removeItem('currentUser');
    this.currentUser = null;
  },

  getCurrentUser() {
    return JSON.parse(localStorage.getItem('currentUser'));
  }
};

================
File: src/data/localDatabase.js
================
const DB_NAME = 'DatingAppDB';
const DB_VERSION = 2;
const STORES = {
  USERS: 'users',
  SWIPES: 'swipes',
  MATCHES: 'matches'
};

export const initDB = () => new Promise((resolve, reject) => {
  const request = indexedDB.open(DB_NAME, DB_VERSION);

  request.onupgradeneeded = (event) => {
    const db = event.target.result;
    
    if (!db.objectStoreNames.contains(STORES.USERS)) {
      const usersStore = db.createObjectStore(STORES.USERS, { keyPath: 'id' });
      usersStore.createIndex('gender', 'gender', { unique: false });
      usersStore.createIndex('preference', 'preference', { unique: false });
    }

    if (!db.objectStoreNames.contains(STORES.SWIPES)) {
      const swipesStore = db.createObjectStore(STORES.SWIPES, { keyPath: 'id' });
      swipesStore.createIndex('swiper', 'swiper', { unique: false });
    }

    if (!db.objectStoreNames.contains(STORES.MATCHES)) {
      db.createObjectStore(STORES.MATCHES, { keyPath: 'id' });
    }
  };

  request.onsuccess = () => resolve(request.result);
  request.onerror = (event) => reject(event.target.error);
});

================
File: src/data/seedData.js
================
import { userService } from './userService';
export const seedInitialUsers = async () => {
  const existing = await userService.getAllUsers();
  if (existing.length === 0) {
    await userService.saveUser({
      id: 'demo1',
      name: 'Alice',
      email: 'alice@example.com',
      gender: 'female',
      preference: 'male',
      age: 25,
      photoURL: '/default-profile.jpg'
    });
    
    await userService.saveUser({
      id: 'demo2',
      name: 'Bob',
      email: 'bob@example.com',
      gender: 'male',
      preference: 'female',
      age: 28,
      photoURL: '/default-profile.jpg'
    });
  }
};

// Call in index.js before render

================
File: src/data/swipeService.js
================
import { initDB } from './localDatabase';

export const swipeService = {
  async addSwipe(swipe) {
    const db = await initDB();
    return new Promise((resolve, reject) => {
      const tx = db.transaction('swipes', 'readwrite');
      const store = tx.objectStore('swipes');
      store.put(swipe);
      tx.oncomplete = resolve;
      tx.onerror = (event) => reject(event.target.error);
    });
  },

  async getSwipesByUser(userId) {
    const db = await initDB();
    return new Promise((resolve, reject) => {
      const tx = db.transaction('swipes', 'readonly');
      const store = tx.objectStore('swipes');
      const index = store.index('swiperId');
      const request = index.getAll(userId);
      
      request.onsuccess = () => resolve(request.result);
      request.onerror = (event) => reject(event.target.error);
    });
  },

  async checkForMatch(userId, swipeeId) {
    const db = await initDB();
    return new Promise((resolve, reject) => {
      const tx = db.transaction('swipes', 'readonly');
      const store = tx.objectStore('swipes');
      const theirSwipeId = `${swipeeId}_${userId}`;
      
      const request = store.get(theirSwipeId);
      
      request.onsuccess = () => {
        resolve(request.result?.direction === 'right');
      };
      
      request.onerror = (event) => reject(event.target.error);
    });
  }
};

================
File: src/data/userService.js
================
import { initDB } from './localDatabase';

export const userService = {
  async saveUser(user) {
    const db = await initDB();
    return new Promise((resolve, reject) => {
      const tx = db.transaction('users', 'readwrite');
      const store = tx.objectStore('users');
      store.put(user);
      tx.oncomplete = () => resolve();
      tx.onerror = (event) => reject(event.target.error);
    });
  },

  async getUser(userId) {
    const db = await initDB();
    return new Promise((resolve, reject) => {
      const tx = db.transaction('users', 'readonly');
      const store = tx.objectStore('users');
      const request = store.get(userId);
      request.onsuccess = () => resolve(request.result);
      request.onerror = (event) => reject(event.target.error);
    });
  },

  async getAllUsers() {
    const db = await initDB();
    return new Promise((resolve, reject) => {
      const tx = db.transaction('users', 'readonly');
      const store = tx.objectStore('users');
      const request = store.getAll();
      request.onsuccess = () => resolve(request.result);
      request.onerror = (event) => reject(event.target.error);
    });
  }
};

================
File: src/App.css
================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

================
File: src/App.js
================
// src/App.js
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import { ErrorBoundary } from './components/errorBoundary';
import { AuthProvider } from './contexts/AuthContext'; // ADD THIS IMPORT
import Home from './components/Home';
import Login from './components/Login';
import Signup from './components/Signup';
import ProtectedRoute from './components/ProtectedRoute';
import ProfileForm from './components/ProfileForm';
import SwipePage from './components/SwipePage';
function App() {
  return (
    <ErrorBoundary>
    <AuthProvider> {/* ADD THIS WRAPPER */}
      <BrowserRouter>
<Routes>
  <Route path="/" element={
    <ProtectedRoute>
      <Home />
    </ProtectedRoute>
  } />
  <Route path="/login" element={<Login />} />
  <Route path="/signup" element={<Signup />} />
  <Route path="/profile" element={
    <ProtectedRoute>
      <ProfileForm />
    </ProtectedRoute>
  } />
  <Route path="/swipe" element={
    <ProtectedRoute>
      <SwipePage />
    </ProtectedRoute>
  } />
</Routes>
      </BrowserRouter>
    </AuthProvider>
    </ErrorBoundary>
  );
}

export default App;

================
File: src/index.css
================
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

================
File: src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { initDB } from './data/localDatabase';
import { seedInitialUsers } from './data/seedData';
const root = ReactDOM.createRoot(document.getElementById('root'));
initDB()
  .then(() => seedInitialUsers())
  .then(() => {
    root.render(
      <React.StrictMode>
        <App />
      </React.StrictMode>
    );
  })
  .catch(error => {
    root.render(
      <div>
        <h1>Initialization Failed</h1>
        <p>{error.message}</p>
      </div>
    );
  });

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

================
File: src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: package.json
================
{
  "name": "ethical-dating",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "idb": "^7.0.0",
    "uuid": "^9.0.0",
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@mui/icons-material": "^7.0.2",
    "@mui/material": "^7.0.2",
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^13.5.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^7.5.0",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

================
File: README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)



================================================================
End of Codebase
================================================================
